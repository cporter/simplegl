// -*- mode: c++ -*-
#include "geeell.h"
#include "convert.h"

using namespace v8;
using namespace convert;

void init_gl(Handle<Object> gl) {
  init_gl_byhand (gl);
  GL_CONST(GL_ACCUM);
  GL_CONST(GL_LOAD);
  GL_CONST(GL_RETURN);
  GL_CONST(GL_MULT);
  GL_CONST(GL_ADD);
  GL_CONST(GL_NEVER);
  GL_CONST(GL_LESS);
  GL_CONST(GL_EQUAL);
  GL_CONST(GL_LEQUAL);
  GL_CONST(GL_GREATER);
  GL_CONST(GL_NOTEQUAL);
  GL_CONST(GL_GEQUAL);
  GL_CONST(GL_ALWAYS);
  GL_CONST(GL_CURRENT_BIT);
  GL_CONST(GL_POINT_BIT);
  GL_CONST(GL_LINE_BIT);
  GL_CONST(GL_POLYGON_BIT);
  GL_CONST(GL_POLYGON_STIPPLE_BIT);
  GL_CONST(GL_PIXEL_MODE_BIT);
  GL_CONST(GL_LIGHTING_BIT);
  GL_CONST(GL_FOG_BIT);
  GL_CONST(GL_DEPTH_BUFFER_BIT);
  GL_CONST(GL_ACCUM_BUFFER_BIT);
  GL_CONST(GL_STENCIL_BUFFER_BIT);
  GL_CONST(GL_VIEWPORT_BIT);
  GL_CONST(GL_TRANSFORM_BIT);
  GL_CONST(GL_ENABLE_BIT);
  GL_CONST(GL_COLOR_BUFFER_BIT);
  GL_CONST(GL_HINT_BIT);
  GL_CONST(GL_EVAL_BIT);
  GL_CONST(GL_LIST_BIT);
  GL_CONST(GL_TEXTURE_BIT);
  GL_CONST(GL_SCISSOR_BIT);
  GL_CONST(GL_ALL_ATTRIB_BITS);
  GL_CONST(GL_POINTS);
  GL_CONST(GL_LINES);
  GL_CONST(GL_LINE_LOOP);
  GL_CONST(GL_LINE_STRIP);
  GL_CONST(GL_TRIANGLES);
  GL_CONST(GL_TRIANGLE_STRIP);
  GL_CONST(GL_TRIANGLE_FAN);
  GL_CONST(GL_QUADS);
  GL_CONST(GL_QUAD_STRIP);
  GL_CONST(GL_POLYGON);
  GL_CONST(GL_SRC_COLOR);
  GL_CONST(GL_ONE_MINUS_SRC_COLOR);
  GL_CONST(GL_SRC_ALPHA);
  GL_CONST(GL_ONE_MINUS_SRC_ALPHA);
  GL_CONST(GL_DST_ALPHA);
  GL_CONST(GL_ONE_MINUS_DST_ALPHA);
  GL_CONST(GL_DST_COLOR);
  GL_CONST(GL_ONE_MINUS_DST_COLOR);
  GL_CONST(GL_SRC_ALPHA_SATURATE);
  GL_CONST(GL_CLIP_PLANE0);
  GL_CONST(GL_CLIP_PLANE1);
  GL_CONST(GL_CLIP_PLANE2);
  GL_CONST(GL_CLIP_PLANE3);
  GL_CONST(GL_CLIP_PLANE4);
  GL_CONST(GL_CLIP_PLANE5);
  GL_CONST(GL_BYTE);
  GL_CONST(GL_UNSIGNED_BYTE);
  GL_CONST(GL_SHORT);
  GL_CONST(GL_UNSIGNED_SHORT);
  GL_CONST(GL_INT);
  GL_CONST(GL_UNSIGNED_INT);
  GL_CONST(GL_FLOAT);
  GL_CONST(GL_2_BYTES);
  GL_CONST(GL_3_BYTES);
  GL_CONST(GL_4_BYTES);
  GL_CONST(GL_DOUBLE);
  GL_CONST(GL_FRONT_LEFT);
  GL_CONST(GL_FRONT_RIGHT);
  GL_CONST(GL_BACK_LEFT);
  GL_CONST(GL_BACK_RIGHT);
  GL_CONST(GL_FRONT);
  GL_CONST(GL_BACK);
  GL_CONST(GL_LEFT);
  GL_CONST(GL_RIGHT);
  GL_CONST(GL_FRONT_AND_BACK);
  GL_CONST(GL_AUX0);
  GL_CONST(GL_AUX1);
  GL_CONST(GL_AUX2);
  GL_CONST(GL_AUX3);
  GL_CONST(GL_INVALID_ENUM);
  GL_CONST(GL_INVALID_VALUE);
  GL_CONST(GL_INVALID_OPERATION);
  GL_CONST(GL_STACK_OVERFLOW);
  GL_CONST(GL_STACK_UNDERFLOW);
  GL_CONST(GL_OUT_OF_MEMORY);
  GL_CONST(GL_2D);
  GL_CONST(GL_3D);
  GL_CONST(GL_3D_COLOR);
  GL_CONST(GL_3D_COLOR_TEXTURE);
  GL_CONST(GL_4D_COLOR_TEXTURE);
  GL_CONST(GL_PASS_THROUGH_TOKEN);
  GL_CONST(GL_POINT_TOKEN);
  GL_CONST(GL_LINE_TOKEN);
  GL_CONST(GL_POLYGON_TOKEN);
  GL_CONST(GL_BITMAP_TOKEN);
  GL_CONST(GL_DRAW_PIXEL_TOKEN);
  GL_CONST(GL_COPY_PIXEL_TOKEN);
  GL_CONST(GL_LINE_RESET_TOKEN);
  GL_CONST(GL_EXP);
  GL_CONST(GL_EXP2);
  GL_CONST(GL_CW);
  GL_CONST(GL_CCW);
  GL_CONST(GL_COEFF);
  GL_CONST(GL_ORDER);
  GL_CONST(GL_DOMAIN);
  GL_CONST(GL_CURRENT_COLOR);
  GL_CONST(GL_CURRENT_INDEX);
  GL_CONST(GL_CURRENT_NORMAL);
  GL_CONST(GL_CURRENT_TEXTURE_COORDS);
  GL_CONST(GL_CURRENT_RASTER_COLOR);
  GL_CONST(GL_CURRENT_RASTER_INDEX);
  GL_CONST(GL_CURRENT_RASTER_TEXTURE_COORDS);
  GL_CONST(GL_CURRENT_RASTER_POSITION);
  GL_CONST(GL_CURRENT_RASTER_POSITION_VALID);
  GL_CONST(GL_CURRENT_RASTER_DISTANCE);
  GL_CONST(GL_POINT_SMOOTH);
  GL_CONST(GL_POINT_SIZE);
  GL_CONST(GL_POINT_SIZE_RANGE);
  GL_CONST(GL_POINT_SIZE_GRANULARITY);
  GL_CONST(GL_LINE_SMOOTH);
  GL_CONST(GL_LINE_WIDTH);
  GL_CONST(GL_LINE_WIDTH_RANGE);
  GL_CONST(GL_LINE_WIDTH_GRANULARITY);
  GL_CONST(GL_LINE_STIPPLE);
  GL_CONST(GL_LINE_STIPPLE_PATTERN);
  GL_CONST(GL_LINE_STIPPLE_REPEAT);
  GL_CONST(GL_LIST_MODE);
  GL_CONST(GL_MAX_LIST_NESTING);
  GL_CONST(GL_LIST_BASE);
  GL_CONST(GL_LIST_INDEX);
  GL_CONST(GL_POLYGON_MODE);
  GL_CONST(GL_POLYGON_SMOOTH);
  GL_CONST(GL_POLYGON_STIPPLE);
  GL_CONST(GL_EDGE_FLAG);
  GL_CONST(GL_CULL_FACE);
  GL_CONST(GL_CULL_FACE_MODE);
  GL_CONST(GL_FRONT_FACE);
  GL_CONST(GL_LIGHTING);
  GL_CONST(GL_LIGHT_MODEL_LOCAL_VIEWER);
  GL_CONST(GL_LIGHT_MODEL_TWO_SIDE);
  GL_CONST(GL_LIGHT_MODEL_AMBIENT);
  GL_CONST(GL_SHADE_MODEL);
  GL_CONST(GL_COLOR_MATERIAL_FACE);
  GL_CONST(GL_COLOR_MATERIAL_PARAMETER);
  GL_CONST(GL_COLOR_MATERIAL);
  GL_CONST(GL_FOG);
  GL_CONST(GL_FOG_INDEX);
  GL_CONST(GL_FOG_DENSITY);
  GL_CONST(GL_FOG_START);
  GL_CONST(GL_FOG_END);
  GL_CONST(GL_FOG_MODE);
  GL_CONST(GL_FOG_COLOR);
  GL_CONST(GL_DEPTH_RANGE);
  GL_CONST(GL_DEPTH_TEST);
  GL_CONST(GL_DEPTH_WRITEMASK);
  GL_CONST(GL_DEPTH_CLEAR_VALUE);
  GL_CONST(GL_DEPTH_FUNC);
  GL_CONST(GL_ACCUM_CLEAR_VALUE);
  GL_CONST(GL_STENCIL_TEST);
  GL_CONST(GL_STENCIL_CLEAR_VALUE);
  GL_CONST(GL_STENCIL_FUNC);
  GL_CONST(GL_STENCIL_VALUE_MASK);
  GL_CONST(GL_STENCIL_FAIL);
  GL_CONST(GL_STENCIL_PASS_DEPTH_FAIL);
  GL_CONST(GL_STENCIL_PASS_DEPTH_PASS);
  GL_CONST(GL_STENCIL_REF);
  GL_CONST(GL_STENCIL_WRITEMASK);
  GL_CONST(GL_MATRIX_MODE);
  GL_CONST(GL_NORMALIZE);
  GL_CONST(GL_VIEWPORT);
  GL_CONST(GL_MODELVIEW_STACK_DEPTH);
  GL_CONST(GL_PROJECTION_STACK_DEPTH);
  GL_CONST(GL_TEXTURE_STACK_DEPTH);
  GL_CONST(GL_MODELVIEW_MATRIX);
  GL_CONST(GL_PROJECTION_MATRIX);
  GL_CONST(GL_TEXTURE_MATRIX);
  GL_CONST(GL_ATTRIB_STACK_DEPTH);
  GL_CONST(GL_CLIENT_ATTRIB_STACK_DEPTH);
  GL_CONST(GL_ALPHA_TEST);
  GL_CONST(GL_ALPHA_TEST_FUNC);
  GL_CONST(GL_ALPHA_TEST_REF);
  GL_CONST(GL_DITHER);
  GL_CONST(GL_BLEND_DST);
  GL_CONST(GL_BLEND_SRC);
  GL_CONST(GL_BLEND);
  GL_CONST(GL_LOGIC_OP_MODE);
  GL_CONST(GL_INDEX_LOGIC_OP);
  GL_CONST(GL_COLOR_LOGIC_OP);
  GL_CONST(GL_AUX_BUFFERS);
  GL_CONST(GL_DRAW_BUFFER);
  GL_CONST(GL_READ_BUFFER);
  GL_CONST(GL_SCISSOR_BOX);
  GL_CONST(GL_SCISSOR_TEST);
  GL_CONST(GL_INDEX_CLEAR_VALUE);
  GL_CONST(GL_INDEX_WRITEMASK);
  GL_CONST(GL_COLOR_CLEAR_VALUE);
  GL_CONST(GL_COLOR_WRITEMASK);
  GL_CONST(GL_INDEX_MODE);
  GL_CONST(GL_RGBA_MODE);
  GL_CONST(GL_DOUBLEBUFFER);
  GL_CONST(GL_STEREO);
  GL_CONST(GL_RENDER_MODE);
  GL_CONST(GL_PERSPECTIVE_CORRECTION_HINT);
  GL_CONST(GL_POINT_SMOOTH_HINT);
  GL_CONST(GL_LINE_SMOOTH_HINT);
  GL_CONST(GL_POLYGON_SMOOTH_HINT);
  GL_CONST(GL_FOG_HINT);
  GL_CONST(GL_TEXTURE_GEN_S);
  GL_CONST(GL_TEXTURE_GEN_T);
  GL_CONST(GL_TEXTURE_GEN_R);
  GL_CONST(GL_TEXTURE_GEN_Q);
  GL_CONST(GL_PIXEL_MAP_I_TO_I);
  GL_CONST(GL_PIXEL_MAP_S_TO_S);
  GL_CONST(GL_PIXEL_MAP_I_TO_R);
  GL_CONST(GL_PIXEL_MAP_I_TO_G);
  GL_CONST(GL_PIXEL_MAP_I_TO_B);
  GL_CONST(GL_PIXEL_MAP_I_TO_A);
  GL_CONST(GL_PIXEL_MAP_R_TO_R);
  GL_CONST(GL_PIXEL_MAP_G_TO_G);
  GL_CONST(GL_PIXEL_MAP_B_TO_B);
  GL_CONST(GL_PIXEL_MAP_A_TO_A);
  GL_CONST(GL_PIXEL_MAP_I_TO_I_SIZE);
  GL_CONST(GL_PIXEL_MAP_S_TO_S_SIZE);
  GL_CONST(GL_PIXEL_MAP_I_TO_R_SIZE);
  GL_CONST(GL_PIXEL_MAP_I_TO_G_SIZE);
  GL_CONST(GL_PIXEL_MAP_I_TO_B_SIZE);
  GL_CONST(GL_PIXEL_MAP_I_TO_A_SIZE);
  GL_CONST(GL_PIXEL_MAP_R_TO_R_SIZE);
  GL_CONST(GL_PIXEL_MAP_G_TO_G_SIZE);
  GL_CONST(GL_PIXEL_MAP_B_TO_B_SIZE);
  GL_CONST(GL_PIXEL_MAP_A_TO_A_SIZE);
  GL_CONST(GL_UNPACK_SWAP_BYTES);
  GL_CONST(GL_UNPACK_LSB_FIRST);
  GL_CONST(GL_UNPACK_ROW_LENGTH);
  GL_CONST(GL_UNPACK_SKIP_ROWS);
  GL_CONST(GL_UNPACK_SKIP_PIXELS);
  GL_CONST(GL_UNPACK_ALIGNMENT);
  GL_CONST(GL_PACK_SWAP_BYTES);
  GL_CONST(GL_PACK_LSB_FIRST);
  GL_CONST(GL_PACK_ROW_LENGTH);
  GL_CONST(GL_PACK_SKIP_ROWS);
  GL_CONST(GL_PACK_SKIP_PIXELS);
  GL_CONST(GL_PACK_ALIGNMENT);
  GL_CONST(GL_MAP_COLOR);
  GL_CONST(GL_MAP_STENCIL);
  GL_CONST(GL_INDEX_SHIFT);
  GL_CONST(GL_INDEX_OFFSET);
  GL_CONST(GL_RED_SCALE);
  GL_CONST(GL_RED_BIAS);
  GL_CONST(GL_ZOOM_X);
  GL_CONST(GL_ZOOM_Y);
  GL_CONST(GL_GREEN_SCALE);
  GL_CONST(GL_GREEN_BIAS);
  GL_CONST(GL_BLUE_SCALE);
  GL_CONST(GL_BLUE_BIAS);
  GL_CONST(GL_ALPHA_SCALE);
  GL_CONST(GL_ALPHA_BIAS);
  GL_CONST(GL_DEPTH_SCALE);
  GL_CONST(GL_DEPTH_BIAS);
  GL_CONST(GL_MAX_EVAL_ORDER);
  GL_CONST(GL_MAX_LIGHTS);
  GL_CONST(GL_MAX_CLIP_PLANES);
  GL_CONST(GL_MAX_TEXTURE_SIZE);
  GL_CONST(GL_MAX_PIXEL_MAP_TABLE);
  GL_CONST(GL_MAX_ATTRIB_STACK_DEPTH);
  GL_CONST(GL_MAX_MODELVIEW_STACK_DEPTH);
  GL_CONST(GL_MAX_NAME_STACK_DEPTH);
  GL_CONST(GL_MAX_PROJECTION_STACK_DEPTH);
  GL_CONST(GL_MAX_TEXTURE_STACK_DEPTH);
  GL_CONST(GL_MAX_VIEWPORT_DIMS);
  GL_CONST(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH);
  GL_CONST(GL_SUBPIXEL_BITS);
  GL_CONST(GL_INDEX_BITS);
  GL_CONST(GL_RED_BITS);
  GL_CONST(GL_GREEN_BITS);
  GL_CONST(GL_BLUE_BITS);
  GL_CONST(GL_ALPHA_BITS);
  GL_CONST(GL_DEPTH_BITS);
  GL_CONST(GL_STENCIL_BITS);
  GL_CONST(GL_ACCUM_RED_BITS);
  GL_CONST(GL_ACCUM_GREEN_BITS);
  GL_CONST(GL_ACCUM_BLUE_BITS);
  GL_CONST(GL_ACCUM_ALPHA_BITS);
  GL_CONST(GL_NAME_STACK_DEPTH);
  GL_CONST(GL_AUTO_NORMAL);
  GL_CONST(GL_MAP1_COLOR_4);
  GL_CONST(GL_MAP1_INDEX);
  GL_CONST(GL_MAP1_NORMAL);
  GL_CONST(GL_MAP1_TEXTURE_COORD_1);
  GL_CONST(GL_MAP1_TEXTURE_COORD_2);
  GL_CONST(GL_MAP1_TEXTURE_COORD_3);
  GL_CONST(GL_MAP1_TEXTURE_COORD_4);
  GL_CONST(GL_MAP1_VERTEX_3);
  GL_CONST(GL_MAP1_VERTEX_4);
  GL_CONST(GL_MAP2_COLOR_4);
  GL_CONST(GL_MAP2_INDEX);
  GL_CONST(GL_MAP2_NORMAL);
  GL_CONST(GL_MAP2_TEXTURE_COORD_1);
  GL_CONST(GL_MAP2_TEXTURE_COORD_2);
  GL_CONST(GL_MAP2_TEXTURE_COORD_3);
  GL_CONST(GL_MAP2_TEXTURE_COORD_4);
  GL_CONST(GL_MAP2_VERTEX_3);
  GL_CONST(GL_MAP2_VERTEX_4);
  GL_CONST(GL_MAP1_GRID_DOMAIN);
  GL_CONST(GL_MAP1_GRID_SEGMENTS);
  GL_CONST(GL_MAP2_GRID_DOMAIN);
  GL_CONST(GL_MAP2_GRID_SEGMENTS);
  GL_CONST(GL_TEXTURE_1D);
  GL_CONST(GL_TEXTURE_2D);
  GL_CONST(GL_FEEDBACK_BUFFER_POINTER);
  GL_CONST(GL_FEEDBACK_BUFFER_SIZE);
  GL_CONST(GL_FEEDBACK_BUFFER_TYPE);
  GL_CONST(GL_SELECTION_BUFFER_POINTER);
  GL_CONST(GL_SELECTION_BUFFER_SIZE);
  GL_CONST(GL_TEXTURE_WIDTH);
  GL_CONST(GL_TEXTURE_HEIGHT);
  GL_CONST(GL_TEXTURE_INTERNAL_FORMAT);
  GL_CONST(GL_TEXTURE_BORDER_COLOR);
  GL_CONST(GL_TEXTURE_BORDER);
  GL_CONST(GL_DONT_CARE);
  GL_CONST(GL_FASTEST);
  GL_CONST(GL_NICEST);
  GL_CONST(GL_LIGHT0);
  GL_CONST(GL_LIGHT1);
  GL_CONST(GL_LIGHT2);
  GL_CONST(GL_LIGHT3);
  GL_CONST(GL_LIGHT4);
  GL_CONST(GL_LIGHT5);
  GL_CONST(GL_LIGHT6);
  GL_CONST(GL_LIGHT7);
  GL_CONST(GL_AMBIENT);
  GL_CONST(GL_DIFFUSE);
  GL_CONST(GL_SPECULAR);
  GL_CONST(GL_POSITION);
  GL_CONST(GL_SPOT_DIRECTION);
  GL_CONST(GL_SPOT_EXPONENT);
  GL_CONST(GL_SPOT_CUTOFF);
  GL_CONST(GL_CONSTANT_ATTENUATION);
  GL_CONST(GL_LINEAR_ATTENUATION);
  GL_CONST(GL_QUADRATIC_ATTENUATION);
  GL_CONST(GL_COMPILE);
  GL_CONST(GL_COMPILE_AND_EXECUTE);
  GL_CONST(GL_CLEAR);
  GL_CONST(GL_AND);
  GL_CONST(GL_AND_REVERSE);
  GL_CONST(GL_COPY);
  GL_CONST(GL_AND_INVERTED);
  GL_CONST(GL_NOOP);
  GL_CONST(GL_XOR);
  GL_CONST(GL_OR);
  GL_CONST(GL_NOR);
  GL_CONST(GL_EQUIV);
  GL_CONST(GL_INVERT);
  GL_CONST(GL_OR_REVERSE);
  GL_CONST(GL_COPY_INVERTED);
  GL_CONST(GL_OR_INVERTED);
  GL_CONST(GL_NAND);
  GL_CONST(GL_SET);
  GL_CONST(GL_EMISSION);
  GL_CONST(GL_SHININESS);
  GL_CONST(GL_AMBIENT_AND_DIFFUSE);
  GL_CONST(GL_COLOR_INDEXES);
  GL_CONST(GL_MODELVIEW);
  GL_CONST(GL_PROJECTION);
  GL_CONST(GL_TEXTURE);
  GL_CONST(GL_COLOR);
  GL_CONST(GL_DEPTH);
  GL_CONST(GL_STENCIL);
  GL_CONST(GL_COLOR_INDEX);
  GL_CONST(GL_STENCIL_INDEX);
  GL_CONST(GL_DEPTH_COMPONENT);
  GL_CONST(GL_RED);
  GL_CONST(GL_GREEN);
  GL_CONST(GL_BLUE);
  GL_CONST(GL_ALPHA);
  GL_CONST(GL_RGB);
  GL_CONST(GL_RGBA);
  GL_CONST(GL_LUMINANCE);
  GL_CONST(GL_LUMINANCE_ALPHA);
  GL_CONST(GL_BITMAP);
  GL_CONST(GL_POINT);
  GL_CONST(GL_LINE);
  GL_CONST(GL_FILL);
  GL_CONST(GL_RENDER);
  GL_CONST(GL_FEEDBACK);
  GL_CONST(GL_SELECT);
  GL_CONST(GL_FLAT);
  GL_CONST(GL_SMOOTH);
  GL_CONST(GL_KEEP);
  GL_CONST(GL_REPLACE);
  GL_CONST(GL_INCR);
  GL_CONST(GL_DECR);
  GL_CONST(GL_VENDOR);
  GL_CONST(GL_RENDERER);
  GL_CONST(GL_VERSION);
  GL_CONST(GL_EXTENSIONS);
  GL_CONST(GL_S);
  GL_CONST(GL_T);
  GL_CONST(GL_R);
  GL_CONST(GL_Q);
  GL_CONST(GL_MODULATE);
  GL_CONST(GL_DECAL);
  GL_CONST(GL_TEXTURE_ENV_MODE);
  GL_CONST(GL_TEXTURE_ENV_COLOR);
  GL_CONST(GL_TEXTURE_ENV);
  GL_CONST(GL_EYE_LINEAR);
  GL_CONST(GL_OBJECT_LINEAR);
  GL_CONST(GL_SPHERE_MAP);
  GL_CONST(GL_TEXTURE_GEN_MODE);
  GL_CONST(GL_OBJECT_PLANE);
  GL_CONST(GL_EYE_PLANE);
  GL_CONST(GL_NEAREST);
  GL_CONST(GL_LINEAR);
  GL_CONST(GL_NEAREST_MIPMAP_NEAREST);
  GL_CONST(GL_LINEAR_MIPMAP_NEAREST);
  GL_CONST(GL_NEAREST_MIPMAP_LINEAR);
  GL_CONST(GL_LINEAR_MIPMAP_LINEAR);
  GL_CONST(GL_TEXTURE_MAG_FILTER);
  GL_CONST(GL_TEXTURE_MIN_FILTER);
  GL_CONST(GL_TEXTURE_WRAP_S);
  GL_CONST(GL_TEXTURE_WRAP_T);
  GL_CONST(GL_CLAMP);
  GL_CONST(GL_REPEAT);
  GL_CONST(GL_CLIENT_PIXEL_STORE_BIT);
  GL_CONST(GL_CLIENT_VERTEX_ARRAY_BIT);
  GL_CONST(GL_POLYGON_OFFSET_FACTOR);
  GL_CONST(GL_POLYGON_OFFSET_UNITS);
  GL_CONST(GL_POLYGON_OFFSET_POINT);
  GL_CONST(GL_POLYGON_OFFSET_LINE);
  GL_CONST(GL_POLYGON_OFFSET_FILL);
  GL_CONST(GL_ALPHA4);
  GL_CONST(GL_ALPHA8);
  GL_CONST(GL_ALPHA12);
  GL_CONST(GL_ALPHA16);
  GL_CONST(GL_LUMINANCE4);
  GL_CONST(GL_LUMINANCE8);
  GL_CONST(GL_LUMINANCE12);
  GL_CONST(GL_LUMINANCE16);
  GL_CONST(GL_LUMINANCE4_ALPHA4);
  GL_CONST(GL_LUMINANCE6_ALPHA2);
  GL_CONST(GL_LUMINANCE8_ALPHA8);
  GL_CONST(GL_LUMINANCE12_ALPHA4);
  GL_CONST(GL_LUMINANCE12_ALPHA12);
  GL_CONST(GL_LUMINANCE16_ALPHA16);
  GL_CONST(GL_INTENSITY);
  GL_CONST(GL_INTENSITY4);
  GL_CONST(GL_INTENSITY8);
  GL_CONST(GL_INTENSITY12);
  GL_CONST(GL_INTENSITY16);
  GL_CONST(GL_R3_G3_B2);
  GL_CONST(GL_RGB4);
  GL_CONST(GL_RGB5);
  GL_CONST(GL_RGB8);
  GL_CONST(GL_RGB10);
  GL_CONST(GL_RGB12);
  GL_CONST(GL_RGB16);
  GL_CONST(GL_RGBA2);
  GL_CONST(GL_RGBA4);
  GL_CONST(GL_RGB5_A1);
  GL_CONST(GL_RGBA8);
  GL_CONST(GL_RGB10_A2);
  GL_CONST(GL_RGBA12);
  GL_CONST(GL_RGBA16);
  GL_CONST(GL_TEXTURE_RED_SIZE);
  GL_CONST(GL_TEXTURE_GREEN_SIZE);
  GL_CONST(GL_TEXTURE_BLUE_SIZE);
  GL_CONST(GL_TEXTURE_ALPHA_SIZE);
  GL_CONST(GL_TEXTURE_LUMINANCE_SIZE);
  GL_CONST(GL_TEXTURE_INTENSITY_SIZE);
  GL_CONST(GL_PROXY_TEXTURE_1D);
  GL_CONST(GL_PROXY_TEXTURE_2D);
  GL_CONST(GL_TEXTURE_PRIORITY);
  GL_CONST(GL_TEXTURE_RESIDENT);
  GL_CONST(GL_TEXTURE_BINDING_1D);
  GL_CONST(GL_TEXTURE_BINDING_2D);
  GL_CONST(GL_TEXTURE_BINDING_3D);
  GL_CONST(GL_VERTEX_ARRAY);
  GL_CONST(GL_NORMAL_ARRAY);
  GL_CONST(GL_COLOR_ARRAY);
  GL_CONST(GL_INDEX_ARRAY);
  GL_CONST(GL_TEXTURE_COORD_ARRAY);
  GL_CONST(GL_EDGE_FLAG_ARRAY);
  GL_CONST(GL_VERTEX_ARRAY_SIZE);
  GL_CONST(GL_VERTEX_ARRAY_TYPE);
  GL_CONST(GL_VERTEX_ARRAY_STRIDE);
  GL_CONST(GL_NORMAL_ARRAY_TYPE);
  GL_CONST(GL_NORMAL_ARRAY_STRIDE);
  GL_CONST(GL_COLOR_ARRAY_SIZE);
  GL_CONST(GL_COLOR_ARRAY_TYPE);
  GL_CONST(GL_COLOR_ARRAY_STRIDE);
  GL_CONST(GL_INDEX_ARRAY_TYPE);
  GL_CONST(GL_INDEX_ARRAY_STRIDE);
  GL_CONST(GL_TEXTURE_COORD_ARRAY_SIZE);
  GL_CONST(GL_TEXTURE_COORD_ARRAY_TYPE);
  GL_CONST(GL_TEXTURE_COORD_ARRAY_STRIDE);
  GL_CONST(GL_EDGE_FLAG_ARRAY_STRIDE);
  GL_CONST(GL_VERTEX_ARRAY_POINTER);
  GL_CONST(GL_NORMAL_ARRAY_POINTER);
  GL_CONST(GL_COLOR_ARRAY_POINTER);
  GL_CONST(GL_INDEX_ARRAY_POINTER);
  GL_CONST(GL_TEXTURE_COORD_ARRAY_POINTER);
  GL_CONST(GL_EDGE_FLAG_ARRAY_POINTER);
  GL_CONST(GL_V2F);
  GL_CONST(GL_V3F);
  GL_CONST(GL_C4UB_V2F);
  GL_CONST(GL_C4UB_V3F);
  GL_CONST(GL_C3F_V3F);
  GL_CONST(GL_N3F_V3F);
  GL_CONST(GL_C4F_N3F_V3F);
  GL_CONST(GL_T2F_V3F);
  GL_CONST(GL_T4F_V4F);
  GL_CONST(GL_T2F_C4UB_V3F);
  GL_CONST(GL_T2F_C3F_V3F);
  GL_CONST(GL_T2F_N3F_V3F);
  GL_CONST(GL_T2F_C4F_N3F_V3F);
  GL_CONST(GL_T4F_C4F_N3F_V4F);
  GL_CONST(GL_BGR);
  GL_CONST(GL_BGRA);
  GL_CONST(GL_CONSTANT_COLOR);
  GL_CONST(GL_ONE_MINUS_CONSTANT_COLOR);
  GL_CONST(GL_CONSTANT_ALPHA);
  GL_CONST(GL_ONE_MINUS_CONSTANT_ALPHA);
  GL_CONST(GL_BLEND_COLOR);
  GL_CONST(GL_FUNC_ADD);
  GL_CONST(GL_MIN);
  GL_CONST(GL_MAX);
  GL_CONST(GL_BLEND_EQUATION);
  GL_CONST(GL_BLEND_EQUATION_RGB);
  GL_CONST(GL_BLEND_EQUATION_ALPHA);
  GL_CONST(GL_FUNC_SUBTRACT);
  GL_CONST(GL_FUNC_REVERSE_SUBTRACT);
  GL_CONST(GL_COLOR_MATRIX);
  GL_CONST(GL_COLOR_MATRIX_STACK_DEPTH);
  GL_CONST(GL_MAX_COLOR_MATRIX_STACK_DEPTH);
  GL_CONST(GL_POST_COLOR_MATRIX_RED_SCALE);
  GL_CONST(GL_POST_COLOR_MATRIX_GREEN_SCALE);
  GL_CONST(GL_POST_COLOR_MATRIX_BLUE_SCALE);
  GL_CONST(GL_POST_COLOR_MATRIX_ALPHA_SCALE);
  GL_CONST(GL_POST_COLOR_MATRIX_RED_BIAS);
  GL_CONST(GL_POST_COLOR_MATRIX_GREEN_BIAS);
  GL_CONST(GL_POST_COLOR_MATRIX_BLUE_BIAS);
  GL_CONST(GL_POST_COLOR_MATRIX_ALPHA_BIAS);
  GL_CONST(GL_COLOR_TABLE);
  GL_CONST(GL_POST_CONVOLUTION_COLOR_TABLE);
  GL_CONST(GL_POST_COLOR_MATRIX_COLOR_TABLE);
  GL_CONST(GL_PROXY_COLOR_TABLE);
  GL_CONST(GL_PROXY_POST_CONVOLUTION_COLOR_TABLE);
  GL_CONST(GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE);
  GL_CONST(GL_COLOR_TABLE_SCALE);
  GL_CONST(GL_COLOR_TABLE_BIAS);
  GL_CONST(GL_COLOR_TABLE_FORMAT);
  GL_CONST(GL_COLOR_TABLE_WIDTH);
  GL_CONST(GL_COLOR_TABLE_RED_SIZE);
  GL_CONST(GL_COLOR_TABLE_GREEN_SIZE);
  GL_CONST(GL_COLOR_TABLE_BLUE_SIZE);
  GL_CONST(GL_COLOR_TABLE_ALPHA_SIZE);
  GL_CONST(GL_COLOR_TABLE_LUMINANCE_SIZE);
  GL_CONST(GL_COLOR_TABLE_INTENSITY_SIZE);
  GL_CONST(GL_CONVOLUTION_1D);
  GL_CONST(GL_CONVOLUTION_2D);
  GL_CONST(GL_SEPARABLE_2D);
  GL_CONST(GL_CONVOLUTION_BORDER_MODE);
  GL_CONST(GL_CONVOLUTION_FILTER_SCALE);
  GL_CONST(GL_CONVOLUTION_FILTER_BIAS);
  GL_CONST(GL_REDUCE);
  GL_CONST(GL_CONVOLUTION_FORMAT);
  GL_CONST(GL_CONVOLUTION_WIDTH);
  GL_CONST(GL_CONVOLUTION_HEIGHT);
  GL_CONST(GL_MAX_CONVOLUTION_WIDTH);
  GL_CONST(GL_MAX_CONVOLUTION_HEIGHT);
  GL_CONST(GL_POST_CONVOLUTION_RED_SCALE);
  GL_CONST(GL_POST_CONVOLUTION_GREEN_SCALE);
  GL_CONST(GL_POST_CONVOLUTION_BLUE_SCALE);
  GL_CONST(GL_POST_CONVOLUTION_ALPHA_SCALE);
  GL_CONST(GL_POST_CONVOLUTION_RED_BIAS);
  GL_CONST(GL_POST_CONVOLUTION_GREEN_BIAS);
  GL_CONST(GL_POST_CONVOLUTION_BLUE_BIAS);
  GL_CONST(GL_POST_CONVOLUTION_ALPHA_BIAS);
  GL_CONST(GL_CONSTANT_BORDER);
  GL_CONST(GL_REPLICATE_BORDER);
  GL_CONST(GL_CONVOLUTION_BORDER_COLOR);
  GL_CONST(GL_MAX_ELEMENTS_VERTICES);
  GL_CONST(GL_MAX_ELEMENTS_INDICES);
  GL_CONST(GL_HISTOGRAM);
  GL_CONST(GL_PROXY_HISTOGRAM);
  GL_CONST(GL_HISTOGRAM_WIDTH);
  GL_CONST(GL_HISTOGRAM_FORMAT);
  GL_CONST(GL_HISTOGRAM_RED_SIZE);
  GL_CONST(GL_HISTOGRAM_GREEN_SIZE);
  GL_CONST(GL_HISTOGRAM_BLUE_SIZE);
  GL_CONST(GL_HISTOGRAM_ALPHA_SIZE);
  GL_CONST(GL_HISTOGRAM_LUMINANCE_SIZE);
  GL_CONST(GL_HISTOGRAM_SINK);
  GL_CONST(GL_MINMAX);
  GL_CONST(GL_MINMAX_FORMAT);
  GL_CONST(GL_MINMAX_SINK);
  GL_CONST(GL_TABLE_TOO_LARGE);
  GL_CONST(GL_UNSIGNED_BYTE_3_3_2);
  GL_CONST(GL_UNSIGNED_SHORT_4_4_4_4);
  GL_CONST(GL_UNSIGNED_SHORT_5_5_5_1);
  GL_CONST(GL_UNSIGNED_INT_8_8_8_8);
  GL_CONST(GL_UNSIGNED_INT_10_10_10_2);
  GL_CONST(GL_UNSIGNED_BYTE_2_3_3_REV);
  GL_CONST(GL_UNSIGNED_SHORT_5_6_5);
  GL_CONST(GL_UNSIGNED_SHORT_5_6_5_REV);
  GL_CONST(GL_UNSIGNED_SHORT_4_4_4_4_REV);
  GL_CONST(GL_UNSIGNED_SHORT_1_5_5_5_REV);
  GL_CONST(GL_UNSIGNED_INT_8_8_8_8_REV);
  GL_CONST(GL_UNSIGNED_INT_2_10_10_10_REV);
  GL_CONST(GL_RESCALE_NORMAL);
  GL_CONST(GL_LIGHT_MODEL_COLOR_CONTROL);
  GL_CONST(GL_SINGLE_COLOR);
  GL_CONST(GL_SEPARATE_SPECULAR_COLOR);
  GL_CONST(GL_PACK_SKIP_IMAGES);
  GL_CONST(GL_PACK_IMAGE_HEIGHT);
  GL_CONST(GL_UNPACK_SKIP_IMAGES);
  GL_CONST(GL_UNPACK_IMAGE_HEIGHT);
  GL_CONST(GL_TEXTURE_3D);
  GL_CONST(GL_PROXY_TEXTURE_3D);
  GL_CONST(GL_TEXTURE_DEPTH);
  GL_CONST(GL_TEXTURE_WRAP_R);
  GL_CONST(GL_MAX_3D_TEXTURE_SIZE);
  GL_CONST(GL_CLAMP_TO_EDGE);
  GL_CONST(GL_CLAMP_TO_BORDER);
  GL_CONST(GL_TEXTURE_MIN_LOD);
  GL_CONST(GL_TEXTURE_MAX_LOD);
  GL_CONST(GL_TEXTURE_BASE_LEVEL);
  GL_CONST(GL_TEXTURE_MAX_LEVEL);
  GL_CONST(GL_SMOOTH_POINT_SIZE_RANGE);
  GL_CONST(GL_SMOOTH_POINT_SIZE_GRANULARITY);
  GL_CONST(GL_SMOOTH_LINE_WIDTH_RANGE);
  GL_CONST(GL_SMOOTH_LINE_WIDTH_GRANULARITY);
  GL_CONST(GL_ALIASED_POINT_SIZE_RANGE);
  GL_CONST(GL_ALIASED_LINE_WIDTH_RANGE);
  GL_CONST(GL_TEXTURE0);
  GL_CONST(GL_TEXTURE1);
  GL_CONST(GL_TEXTURE2);
  GL_CONST(GL_TEXTURE3);
  GL_CONST(GL_TEXTURE4);
  GL_CONST(GL_TEXTURE5);
  GL_CONST(GL_TEXTURE6);
  GL_CONST(GL_TEXTURE7);
  GL_CONST(GL_TEXTURE8);
  GL_CONST(GL_TEXTURE9);
  GL_CONST(GL_TEXTURE10);
  GL_CONST(GL_TEXTURE11);
  GL_CONST(GL_TEXTURE12);
  GL_CONST(GL_TEXTURE13);
  GL_CONST(GL_TEXTURE14);
  GL_CONST(GL_TEXTURE15);
  GL_CONST(GL_TEXTURE16);
  GL_CONST(GL_TEXTURE17);
  GL_CONST(GL_TEXTURE18);
  GL_CONST(GL_TEXTURE19);
  GL_CONST(GL_TEXTURE20);
  GL_CONST(GL_TEXTURE21);
  GL_CONST(GL_TEXTURE22);
  GL_CONST(GL_TEXTURE23);
  GL_CONST(GL_TEXTURE24);
  GL_CONST(GL_TEXTURE25);
  GL_CONST(GL_TEXTURE26);
  GL_CONST(GL_TEXTURE27);
  GL_CONST(GL_TEXTURE28);
  GL_CONST(GL_TEXTURE29);
  GL_CONST(GL_TEXTURE30);
  GL_CONST(GL_TEXTURE31);
  GL_CONST(GL_ACTIVE_TEXTURE);
  GL_CONST(GL_CLIENT_ACTIVE_TEXTURE);
  GL_CONST(GL_MAX_TEXTURE_UNITS);
  GL_CONST(GL_COMBINE);
  GL_CONST(GL_COMBINE_RGB);
  GL_CONST(GL_COMBINE_ALPHA);
  GL_CONST(GL_RGB_SCALE);
  GL_CONST(GL_ADD_SIGNED);
  GL_CONST(GL_INTERPOLATE);
  GL_CONST(GL_CONSTANT);
  GL_CONST(GL_PRIMARY_COLOR);
  GL_CONST(GL_PREVIOUS);
  GL_CONST(GL_SUBTRACT);
  GL_CONST(GL_SRC0_RGB);
  GL_CONST(GL_SRC1_RGB);
  GL_CONST(GL_SRC2_RGB);
  GL_CONST(GL_SRC0_ALPHA);
  GL_CONST(GL_SRC1_ALPHA);
  GL_CONST(GL_SRC2_ALPHA);
  GL_CONST(GL_SOURCE0_RGB);
  GL_CONST(GL_SOURCE1_RGB);
  GL_CONST(GL_SOURCE2_RGB);
  GL_CONST(GL_SOURCE0_ALPHA);
  GL_CONST(GL_SOURCE1_ALPHA);
  GL_CONST(GL_SOURCE2_ALPHA);
  GL_CONST(GL_OPERAND0_RGB);
  GL_CONST(GL_OPERAND1_RGB);
  GL_CONST(GL_OPERAND2_RGB);
  GL_CONST(GL_OPERAND0_ALPHA);
  GL_CONST(GL_OPERAND1_ALPHA);
  GL_CONST(GL_OPERAND2_ALPHA);
  GL_CONST(GL_DOT3_RGB);
  GL_CONST(GL_DOT3_RGBA);
  GL_CONST(GL_TRANSPOSE_MODELVIEW_MATRIX);
  GL_CONST(GL_TRANSPOSE_PROJECTION_MATRIX);
  GL_CONST(GL_TRANSPOSE_TEXTURE_MATRIX);
  GL_CONST(GL_TRANSPOSE_COLOR_MATRIX);
  GL_CONST(GL_NORMAL_MAP);
  GL_CONST(GL_REFLECTION_MAP);
  GL_CONST(GL_TEXTURE_CUBE_MAP);
  GL_CONST(GL_TEXTURE_BINDING_CUBE_MAP);
  GL_CONST(GL_TEXTURE_CUBE_MAP_POSITIVE_X);
  GL_CONST(GL_TEXTURE_CUBE_MAP_NEGATIVE_X);
  GL_CONST(GL_TEXTURE_CUBE_MAP_POSITIVE_Y);
  GL_CONST(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y);
  GL_CONST(GL_TEXTURE_CUBE_MAP_POSITIVE_Z);
  GL_CONST(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z);
  GL_CONST(GL_PROXY_TEXTURE_CUBE_MAP);
  GL_CONST(GL_MAX_CUBE_MAP_TEXTURE_SIZE);
  GL_CONST(GL_COMPRESSED_ALPHA);
  GL_CONST(GL_COMPRESSED_LUMINANCE);
  GL_CONST(GL_COMPRESSED_LUMINANCE_ALPHA);
  GL_CONST(GL_COMPRESSED_INTENSITY);
  GL_CONST(GL_COMPRESSED_RGB);
  GL_CONST(GL_COMPRESSED_RGBA);
  GL_CONST(GL_TEXTURE_COMPRESSION_HINT);
  GL_CONST(GL_TEXTURE_COMPRESSED_IMAGE_SIZE);
  GL_CONST(GL_TEXTURE_COMPRESSED);
  GL_CONST(GL_NUM_COMPRESSED_TEXTURE_FORMATS);
  GL_CONST(GL_COMPRESSED_TEXTURE_FORMATS);
  GL_CONST(GL_MULTISAMPLE);
  GL_CONST(GL_SAMPLE_ALPHA_TO_COVERAGE);
  GL_CONST(GL_SAMPLE_ALPHA_TO_ONE);
  GL_CONST(GL_SAMPLE_COVERAGE);
  GL_CONST(GL_SAMPLE_BUFFERS);
  GL_CONST(GL_SAMPLES);
  GL_CONST(GL_SAMPLE_COVERAGE_VALUE);
  GL_CONST(GL_SAMPLE_COVERAGE_INVERT);
  GL_CONST(GL_MULTISAMPLE_BIT);
  GL_CONST(GL_DEPTH_COMPONENT16);
  GL_CONST(GL_DEPTH_COMPONENT24);
  GL_CONST(GL_DEPTH_COMPONENT32);
  GL_CONST(GL_TEXTURE_DEPTH_SIZE);
  GL_CONST(GL_DEPTH_TEXTURE_MODE);
  GL_CONST(GL_TEXTURE_COMPARE_MODE);
  GL_CONST(GL_TEXTURE_COMPARE_FUNC);
  GL_CONST(GL_COMPARE_R_TO_TEXTURE);
  GL_CONST(GL_QUERY_COUNTER_BITS);
  GL_CONST(GL_CURRENT_QUERY);
  GL_CONST(GL_QUERY_RESULT);
  GL_CONST(GL_QUERY_RESULT_AVAILABLE);
  GL_CONST(GL_SAMPLES_PASSED);
  GL_CONST(GL_FOG_COORD_SRC);
  GL_CONST(GL_FOG_COORD);
  GL_CONST(GL_FRAGMENT_DEPTH);
  GL_CONST(GL_CURRENT_FOG_COORD);
  GL_CONST(GL_FOG_COORD_ARRAY_TYPE);
  GL_CONST(GL_FOG_COORD_ARRAY_STRIDE);
  GL_CONST(GL_FOG_COORD_ARRAY_POINTER);
  GL_CONST(GL_FOG_COORD_ARRAY);
  GL_CONST(GL_FOG_COORDINATE_SOURCE);
  GL_CONST(GL_FOG_COORDINATE);
  GL_CONST(GL_CURRENT_FOG_COORDINATE);
  GL_CONST(GL_FOG_COORDINATE_ARRAY_TYPE);
  GL_CONST(GL_FOG_COORDINATE_ARRAY_STRIDE);
  GL_CONST(GL_FOG_COORDINATE_ARRAY_POINTER);
  GL_CONST(GL_FOG_COORDINATE_ARRAY);
  GL_CONST(GL_COLOR_SUM);
  GL_CONST(GL_CURRENT_SECONDARY_COLOR);
  GL_CONST(GL_SECONDARY_COLOR_ARRAY_SIZE);
  GL_CONST(GL_SECONDARY_COLOR_ARRAY_TYPE);
  GL_CONST(GL_SECONDARY_COLOR_ARRAY_STRIDE);
  GL_CONST(GL_SECONDARY_COLOR_ARRAY_POINTER);
  GL_CONST(GL_SECONDARY_COLOR_ARRAY);
  GL_CONST(GL_POINT_SIZE_MIN);
  GL_CONST(GL_POINT_SIZE_MAX);
  GL_CONST(GL_POINT_FADE_THRESHOLD_SIZE);
  GL_CONST(GL_POINT_DISTANCE_ATTENUATION);
  GL_CONST(GL_BLEND_DST_RGB);
  GL_CONST(GL_BLEND_SRC_RGB);
  GL_CONST(GL_BLEND_DST_ALPHA);
  GL_CONST(GL_BLEND_SRC_ALPHA);
  GL_CONST(GL_GENERATE_MIPMAP);
  GL_CONST(GL_GENERATE_MIPMAP_HINT);
  GL_CONST(GL_INCR_WRAP);
  GL_CONST(GL_DECR_WRAP);
  GL_CONST(GL_MIRRORED_REPEAT);
  GL_CONST(GL_MAX_TEXTURE_LOD_BIAS);
  GL_CONST(GL_TEXTURE_FILTER_CONTROL);
  GL_CONST(GL_TEXTURE_LOD_BIAS);
  GL_CONST(GL_ARRAY_BUFFER);
  GL_CONST(GL_ELEMENT_ARRAY_BUFFER);
  GL_CONST(GL_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_ELEMENT_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_VERTEX_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_NORMAL_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_COLOR_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_INDEX_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_FOG_COORD_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_WEIGHT_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_STREAM_DRAW);
  GL_CONST(GL_STREAM_READ);
  GL_CONST(GL_STREAM_COPY);
  GL_CONST(GL_STATIC_DRAW);
  GL_CONST(GL_STATIC_READ);
  GL_CONST(GL_STATIC_COPY);
  GL_CONST(GL_DYNAMIC_DRAW);
  GL_CONST(GL_DYNAMIC_READ);
  GL_CONST(GL_DYNAMIC_COPY);
  GL_CONST(GL_READ_ONLY);
  GL_CONST(GL_WRITE_ONLY);
  GL_CONST(GL_READ_WRITE);
  GL_CONST(GL_BUFFER_SIZE);
  GL_CONST(GL_BUFFER_USAGE);
  GL_CONST(GL_BUFFER_ACCESS);
  GL_CONST(GL_BUFFER_MAPPED);
  GL_CONST(GL_BUFFER_MAP_POINTER);
  GL_CONST(GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING);
  GL_CONST(GL_CURRENT_PROGRAM);
  GL_CONST(GL_SHADER_TYPE);
  GL_CONST(GL_DELETE_STATUS);
  GL_CONST(GL_COMPILE_STATUS);
  GL_CONST(GL_LINK_STATUS);
  GL_CONST(GL_VALIDATE_STATUS);
  GL_CONST(GL_INFO_LOG_LENGTH);
  GL_CONST(GL_ATTACHED_SHADERS);
  GL_CONST(GL_ACTIVE_UNIFORMS);
  GL_CONST(GL_ACTIVE_UNIFORM_MAX_LENGTH);
  GL_CONST(GL_SHADER_SOURCE_LENGTH);
  GL_CONST(GL_FLOAT_VEC2);
  GL_CONST(GL_FLOAT_VEC3);
  GL_CONST(GL_FLOAT_VEC4);
  GL_CONST(GL_INT_VEC2);
  GL_CONST(GL_INT_VEC3);
  GL_CONST(GL_INT_VEC4);
  GL_CONST(GL_BOOL);
  GL_CONST(GL_BOOL_VEC2);
  GL_CONST(GL_BOOL_VEC3);
  GL_CONST(GL_BOOL_VEC4);
  GL_CONST(GL_FLOAT_MAT2);
  GL_CONST(GL_FLOAT_MAT3);
  GL_CONST(GL_FLOAT_MAT4);
  GL_CONST(GL_SAMPLER_1D);
  GL_CONST(GL_SAMPLER_2D);
  GL_CONST(GL_SAMPLER_3D);
  GL_CONST(GL_SAMPLER_CUBE);
  GL_CONST(GL_SAMPLER_1D_SHADOW);
  GL_CONST(GL_SAMPLER_2D_SHADOW);
  GL_CONST(GL_SHADING_LANGUAGE_VERSION);
  GL_CONST(GL_VERTEX_SHADER);
  GL_CONST(GL_MAX_VERTEX_UNIFORM_COMPONENTS);
  GL_CONST(GL_MAX_VARYING_FLOATS);
  GL_CONST(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  GL_CONST(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  GL_CONST(GL_ACTIVE_ATTRIBUTES);
  GL_CONST(GL_ACTIVE_ATTRIBUTE_MAX_LENGTH);
  GL_CONST(GL_FRAGMENT_SHADER);
  GL_CONST(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS);
  GL_CONST(GL_FRAGMENT_SHADER_DERIVATIVE_HINT);
  GL_CONST(GL_MAX_VERTEX_ATTRIBS);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_ENABLED);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_SIZE);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_STRIDE);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_TYPE);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_NORMALIZED);
  GL_CONST(GL_CURRENT_VERTEX_ATTRIB);
  GL_CONST(GL_VERTEX_ATTRIB_ARRAY_POINTER);
  GL_CONST(GL_VERTEX_PROGRAM_POINT_SIZE);
  GL_CONST(GL_VERTEX_PROGRAM_TWO_SIDE);
  GL_CONST(GL_MAX_TEXTURE_COORDS);
  GL_CONST(GL_MAX_TEXTURE_IMAGE_UNITS);
  GL_CONST(GL_MAX_DRAW_BUFFERS);
  GL_CONST(GL_DRAW_BUFFER0);
  GL_CONST(GL_DRAW_BUFFER1);
  GL_CONST(GL_DRAW_BUFFER2);
  GL_CONST(GL_DRAW_BUFFER3);
  GL_CONST(GL_DRAW_BUFFER4);
  GL_CONST(GL_DRAW_BUFFER5);
  GL_CONST(GL_DRAW_BUFFER6);
  GL_CONST(GL_DRAW_BUFFER7);
  GL_CONST(GL_DRAW_BUFFER8);
  GL_CONST(GL_DRAW_BUFFER9);
  GL_CONST(GL_DRAW_BUFFER10);
  GL_CONST(GL_DRAW_BUFFER11);
  GL_CONST(GL_DRAW_BUFFER12);
  GL_CONST(GL_DRAW_BUFFER13);
  GL_CONST(GL_DRAW_BUFFER14);
  GL_CONST(GL_DRAW_BUFFER15);
  GL_CONST(GL_POINT_SPRITE);
  GL_CONST(GL_COORD_REPLACE);
  GL_CONST(GL_POINT_SPRITE_COORD_ORIGIN);
  GL_CONST(GL_LOWER_LEFT);
  GL_CONST(GL_UPPER_LEFT);
  GL_CONST(GL_STENCIL_BACK_FUNC);
  GL_CONST(GL_STENCIL_BACK_VALUE_MASK);
  GL_CONST(GL_STENCIL_BACK_REF);
  GL_CONST(GL_STENCIL_BACK_FAIL);
  GL_CONST(GL_STENCIL_BACK_PASS_DEPTH_FAIL);
  GL_CONST(GL_STENCIL_BACK_PASS_DEPTH_PASS);
  GL_CONST(GL_STENCIL_BACK_WRITEMASK);
  GL_CONST(GL_CURRENT_RASTER_SECONDARY_COLOR);
  GL_CONST(GL_PIXEL_PACK_BUFFER);
  GL_CONST(GL_PIXEL_UNPACK_BUFFER);
  GL_CONST(GL_PIXEL_PACK_BUFFER_BINDING);
  GL_CONST(GL_PIXEL_UNPACK_BUFFER_BINDING);
  GL_CONST(GL_SRGB);
  GL_CONST(GL_SRGB8);
  GL_CONST(GL_SRGB_ALPHA);
  GL_CONST(GL_SRGB8_ALPHA8);
  GL_CONST(GL_SLUMINANCE_ALPHA);
  GL_CONST(GL_SLUMINANCE8_ALPHA8);
  GL_CONST(GL_SLUMINANCE);
  GL_CONST(GL_SLUMINANCE8);
  GL_CONST(GL_COMPRESSED_SRGB);
  GL_CONST(GL_COMPRESSED_SRGB_ALPHA);
  GL_CONST(GL_COMPRESSED_SLUMINANCE);
  GL_CONST(GL_COMPRESSED_SLUMINANCE_ALPHA);

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glAccum (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glAccum (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glAccum"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glAlphaFunc (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLclampf arg_1 = JSTO<GLclampf> (args[1]);
        
        glAlphaFunc (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glAlphaFunc"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glArrayElement (needs 1)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        
        glArrayElement (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glArrayElement"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glBegin (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glBegin (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBegin"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glBindTexture (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        
        glBindTexture (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBindTexture"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glBlendColor (needs 4)"));
        
        GLclampf arg_0 = JSTO<GLclampf> (args[0]);
        GLclampf arg_1 = JSTO<GLclampf> (args[1]);
        GLclampf arg_2 = JSTO<GLclampf> (args[2]);
        GLclampf arg_3 = JSTO<GLclampf> (args[3]);
        
        glBlendColor (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBlendColor"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glBlendEquation (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glBlendEquation (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBlendEquation"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glBlendEquationSeparate (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        glBlendEquationSeparate (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBlendEquationSeparate"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glBlendFunc (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        glBlendFunc (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBlendFunc"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glCallList (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glCallList (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCallList"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glClear (needs 1)"));
        
        GLbitfield arg_0 = JSTO<GLbitfield> (args[0]);
        
        glClear (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClear"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glClearAccum (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glClearAccum (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClearAccum"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glClearColor (needs 4)"));
        
        GLclampf arg_0 = JSTO<GLclampf> (args[0]);
        GLclampf arg_1 = JSTO<GLclampf> (args[1]);
        GLclampf arg_2 = JSTO<GLclampf> (args[2]);
        GLclampf arg_3 = JSTO<GLclampf> (args[3]);
        
        glClearColor (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClearColor"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glClearDepth (needs 1)"));
        
        GLclampd arg_0 = JSTO<GLclampd> (args[0]);
        
        glClearDepth (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClearDepth"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glClearIndex (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glClearIndex (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClearIndex"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glClearStencil (needs 1)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        
        glClearStencil (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClearStencil"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3b (needs 3)"));
        
        GLbyte arg_0 = JSTO<GLbyte> (args[0]);
        GLbyte arg_1 = JSTO<GLbyte> (args[1]);
        GLbyte arg_2 = JSTO<GLbyte> (args[2]);
        
        glColor3b (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3b"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glColor3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glColor3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glColor3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glColor3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3ub (needs 3)"));
        
        GLubyte arg_0 = JSTO<GLubyte> (args[0]);
        GLubyte arg_1 = JSTO<GLubyte> (args[1]);
        GLubyte arg_2 = JSTO<GLubyte> (args[2]);
        
        glColor3ub (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3ub"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3ui (needs 3)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        GLuint arg_2 = JSTO<GLuint> (args[2]);
        
        glColor3ui (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3ui"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glColor3us (needs 3)"));
        
        GLushort arg_0 = JSTO<GLushort> (args[0]);
        GLushort arg_1 = JSTO<GLushort> (args[1]);
        GLushort arg_2 = JSTO<GLushort> (args[2]);
        
        glColor3us (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor3us"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4b (needs 4)"));
        
        GLbyte arg_0 = JSTO<GLbyte> (args[0]);
        GLbyte arg_1 = JSTO<GLbyte> (args[1]);
        GLbyte arg_2 = JSTO<GLbyte> (args[2]);
        GLbyte arg_3 = JSTO<GLbyte> (args[3]);
        
        glColor4b (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4b"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4d (needs 4)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glColor4d (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4f (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glColor4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4i (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glColor4i (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4s (needs 4)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glColor4s (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4ub (needs 4)"));
        
        GLubyte arg_0 = JSTO<GLubyte> (args[0]);
        GLubyte arg_1 = JSTO<GLubyte> (args[1]);
        GLubyte arg_2 = JSTO<GLubyte> (args[2]);
        GLubyte arg_3 = JSTO<GLubyte> (args[3]);
        
        glColor4ub (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4ub"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4ui (needs 4)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        GLuint arg_2 = JSTO<GLuint> (args[2]);
        GLuint arg_3 = JSTO<GLuint> (args[3]);
        
        glColor4ui (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4ui"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColor4us (needs 4)"));
        
        GLushort arg_0 = JSTO<GLushort> (args[0]);
        GLushort arg_1 = JSTO<GLushort> (args[1]);
        GLushort arg_2 = JSTO<GLushort> (args[2]);
        GLushort arg_3 = JSTO<GLushort> (args[3]);
        
        glColor4us (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColor4us"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glColorMask (needs 4)"));
        
        GLboolean arg_0 = JSTO<GLboolean> (args[0]);
        GLboolean arg_1 = JSTO<GLboolean> (args[1]);
        GLboolean arg_2 = JSTO<GLboolean> (args[2]);
        GLboolean arg_3 = JSTO<GLboolean> (args[3]);
        
        glColorMask (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColorMask"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glColorMaterial (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        glColorMaterial (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glColorMaterial"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glConvolutionParameterf (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glConvolutionParameterf (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glConvolutionParameterf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glConvolutionParameteri (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glConvolutionParameteri (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glConvolutionParameteri"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glCopyColorSubTable (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLsizei arg_1 = JSTO<GLsizei> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLsizei arg_4 = JSTO<GLsizei> (args[4]);
        
        glCopyColorSubTable (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyColorSubTable"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glCopyColorTable (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLsizei arg_4 = JSTO<GLsizei> (args[4]);
        
        glCopyColorTable (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyColorTable"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glCopyConvolutionFilter1D (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLsizei arg_4 = JSTO<GLsizei> (args[4]);
        
        glCopyConvolutionFilter1D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyConvolutionFilter1D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 6)
          return ThrowException
            (String::New("Not enough arguments for glCopyConvolutionFilter2D (needs 6)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLsizei arg_4 = JSTO<GLsizei> (args[4]);
        GLsizei arg_5 = JSTO<GLsizei> (args[5]);
        
        glCopyConvolutionFilter2D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyConvolutionFilter2D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glCopyPixels (needs 5)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLsizei arg_2 = JSTO<GLsizei> (args[2]);
        GLsizei arg_3 = JSTO<GLsizei> (args[3]);
        GLenum arg_4 = JSTO<GLenum> (args[4]);
        
        glCopyPixels (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyPixels"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 7)
          return ThrowException
            (String::New("Not enough arguments for glCopyTexImage1D (needs 7)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        GLsizei arg_5 = JSTO<GLsizei> (args[5]);
        GLint arg_6 = JSTO<GLint> (args[6]);
        
        glCopyTexImage1D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyTexImage1D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 8)
          return ThrowException
            (String::New("Not enough arguments for glCopyTexImage2D (needs 8)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        GLsizei arg_5 = JSTO<GLsizei> (args[5]);
        GLsizei arg_6 = JSTO<GLsizei> (args[6]);
        GLint arg_7 = JSTO<GLint> (args[7]);
        
        glCopyTexImage2D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyTexImage2D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 6)
          return ThrowException
            (String::New("Not enough arguments for glCopyTexSubImage1D (needs 6)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        GLsizei arg_5 = JSTO<GLsizei> (args[5]);
        
        glCopyTexSubImage1D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyTexSubImage1D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 8)
          return ThrowException
            (String::New("Not enough arguments for glCopyTexSubImage2D (needs 8)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        GLint arg_5 = JSTO<GLint> (args[5]);
        GLsizei arg_6 = JSTO<GLsizei> (args[6]);
        GLsizei arg_7 = JSTO<GLsizei> (args[7]);
        
        glCopyTexSubImage2D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyTexSubImage2D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 9)
          return ThrowException
            (String::New("Not enough arguments for glCopyTexSubImage3D (needs 9)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        GLint arg_5 = JSTO<GLint> (args[5]);
        GLint arg_6 = JSTO<GLint> (args[6]);
        GLsizei arg_7 = JSTO<GLsizei> (args[7]);
        GLsizei arg_8 = JSTO<GLsizei> (args[8]);
        
        glCopyTexSubImage3D (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7
          , arg_8);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCopyTexSubImage3D"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glCullFace (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glCullFace (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCullFace"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glDeleteLists (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLsizei arg_1 = JSTO<GLsizei> (args[1]);
        
        glDeleteLists (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDeleteLists"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDepthFunc (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glDepthFunc (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDepthFunc"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDepthMask (needs 1)"));
        
        GLboolean arg_0 = JSTO<GLboolean> (args[0]);
        
        glDepthMask (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDepthMask"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glDepthRange (needs 2)"));
        
        GLclampd arg_0 = JSTO<GLclampd> (args[0]);
        GLclampd arg_1 = JSTO<GLclampd> (args[1]);
        
        glDepthRange (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDepthRange"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDisable (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glDisable (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDisable"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDisableClientState (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glDisableClientState (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDisableClientState"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glDrawArrays (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLsizei arg_2 = JSTO<GLsizei> (args[2]);
        
        glDrawArrays (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDrawArrays"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDrawBuffer (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glDrawBuffer (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDrawBuffer"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEdgeFlag (needs 1)"));
        
        GLboolean arg_0 = JSTO<GLboolean> (args[0]);
        
        glEdgeFlag (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEdgeFlag"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEnable (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glEnable (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEnable"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEnableClientState (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glEnableClientState (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEnableClientState"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glEnd (needs 0)"));
        
        
        glEnd ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEnd"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glEndList (needs 0)"));
        
        
        glEndList ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEndList"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEvalCoord1d (needs 1)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        
        glEvalCoord1d (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalCoord1d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEvalCoord1f (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glEvalCoord1f (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalCoord1f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glEvalCoord2d (needs 2)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glEvalCoord2d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalCoord2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glEvalCoord2f (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glEvalCoord2f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalCoord2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glEvalMesh1 (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glEvalMesh1 (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalMesh1"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glEvalMesh2 (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        
        glEvalMesh2 (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalMesh2"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEvalPoint1 (needs 1)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        
        glEvalPoint1 (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalPoint1"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glEvalPoint2 (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glEvalPoint2 (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEvalPoint2"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glFinish (needs 0)"));
        
        
        glFinish ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFinish"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glFlush (needs 0)"));
        
        
        glFlush ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFlush"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glFogf (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glFogf (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFogf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glFogi (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glFogi (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFogi"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glFrontFace (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glFrontFace (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFrontFace"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 6)
          return ThrowException
            (String::New("Not enough arguments for glFrustum (needs 6)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        GLdouble arg_4 = JSTO<GLdouble> (args[4]);
        GLdouble arg_5 = JSTO<GLdouble> (args[5]);
        
        glFrustum (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFrustum"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGenLists (needs 1)"));
        
        GLsizei arg_0 = JSTO<GLsizei> (args[0]);
        GLuint ret =
        glGenLists (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glGenLists"), tmpl -> GetFunction ());
  }
  
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetBooleanv (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLboolean ret;
        glGetBooleanv (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetBooleanv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetClipPlane (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLdouble ret;
        glGetClipPlane (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetClipPlane"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetColorTableParameterfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetColorTableParameterfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetColorTableParameterfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetColorTableParameteriv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetColorTableParameteriv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetColorTableParameteriv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetConvolutionParameterfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetConvolutionParameterfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetConvolutionParameterfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetConvolutionParameteriv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetConvolutionParameteriv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetConvolutionParameteriv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetDoublev (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLdouble ret;
        glGetDoublev (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetDoublev"), tmpl -> GetFunction ());
  }

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glGetError (needs 0)"));
        
        GLenum ret =
        glGetError ();
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glGetError"), tmpl -> GetFunction ());
  }
  
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetFloatv (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLfloat ret;
        glGetFloatv (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetFloatv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetHistogramParameterfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetHistogramParameterfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetHistogramParameterfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetHistogramParameteriv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetHistogramParameteriv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetHistogramParameteriv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetIntegerv (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLint ret;
        glGetIntegerv (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetIntegerv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetLightfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetLightfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetLightfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetLightiv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetLightiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetLightiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMapdv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLdouble ret;
        glGetMapdv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMapdv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMapfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetMapfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMapfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMapiv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetMapiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMapiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMaterialfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetMaterialfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMaterialfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMaterialiv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetMaterialiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMaterialiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMinmaxParameterfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetMinmaxParameterfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMinmaxParameterfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetMinmaxParameteriv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetMinmaxParameteriv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetMinmaxParameteriv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetPixelMapfv (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLfloat ret;
        glGetPixelMapfv (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetPixelMapfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetPixelMapuiv (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLuint ret;
        glGetPixelMapuiv (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetPixelMapuiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetPixelMapusv (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLushort ret;
        glGetPixelMapusv (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetPixelMapusv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexEnvfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetTexEnvfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexEnvfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexEnviv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetTexEnviv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexEnviv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexGendv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLdouble ret;
        glGetTexGendv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexGendv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexGenfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetTexGenfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexGenfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexGeniv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetTexGeniv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexGeniv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glGetTexLevelParameterfv (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        
        GLfloat ret;
        glGetTexLevelParameterfv (arg_0, arg_1, arg_2, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexLevelParameterfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glGetTexLevelParameteriv (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        
        GLint ret;
        glGetTexLevelParameteriv (arg_0, arg_1, arg_2, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexLevelParameteriv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexParameterfv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetTexParameterfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexParameterfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetTexParameteriv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetTexParameteriv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetTexParameteriv"), tmpl -> GetFunction ());
  }

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glHint (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        glHint (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glHint"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glHistogram (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLsizei arg_1 = JSTO<GLsizei> (args[1]);
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        GLboolean arg_3 = JSTO<GLboolean> (args[3]);
        
        glHistogram (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glHistogram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIndexMask (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glIndexMask (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glIndexMask"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIndexd (needs 1)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        
        glIndexd (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glIndexd"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIndexf (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glIndexf (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glIndexf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIndexi (needs 1)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        
        glIndexi (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glIndexi"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIndexs (needs 1)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        
        glIndexs (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glIndexs"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIndexub (needs 1)"));
        
        GLubyte arg_0 = JSTO<GLubyte> (args[0]);
        
        glIndexub (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glIndexub"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glInitNames (needs 0)"));
        
        
        glInitNames ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glInitNames"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsEnabled (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLboolean ret =
        glIsEnabled (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsEnabled"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsList (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLboolean ret =
        glIsList (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsList"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsTexture (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLboolean ret =
        glIsTexture (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsTexture"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glLightModelf (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glLightModelf (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLightModelf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glLightModeli (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glLightModeli (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLightModeli"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glLightf (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glLightf (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLightf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glLighti (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glLighti (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLighti"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glLineStipple (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLushort arg_1 = JSTO<GLushort> (args[1]);
        
        glLineStipple (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLineStipple"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glLineWidth (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glLineWidth (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLineWidth"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glListBase (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glListBase (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glListBase"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glLoadIdentity (needs 0)"));
        
        
        glLoadIdentity ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLoadIdentity"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glLoadName (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glLoadName (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLoadName"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glLogicOp (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glLogicOp (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLogicOp"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMapGrid1d (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glMapGrid1d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMapGrid1d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMapGrid1f (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glMapGrid1f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMapGrid1f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 6)
          return ThrowException
            (String::New("Not enough arguments for glMapGrid2d (needs 6)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLdouble arg_4 = JSTO<GLdouble> (args[4]);
        GLdouble arg_5 = JSTO<GLdouble> (args[5]);
        
        glMapGrid2d (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMapGrid2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 6)
          return ThrowException
            (String::New("Not enough arguments for glMapGrid2f (needs 6)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLfloat arg_4 = JSTO<GLfloat> (args[4]);
        GLfloat arg_5 = JSTO<GLfloat> (args[5]);
        
        glMapGrid2f (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMapGrid2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMaterialf (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glMaterialf (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMaterialf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMateriali (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glMateriali (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMateriali"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glMatrixMode (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glMatrixMode (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMatrixMode"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMinmax (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLboolean arg_2 = JSTO<GLboolean> (args[2]);
        
        glMinmax (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMinmax"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glNewList (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        glNewList (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glNewList"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glNormal3b (needs 3)"));
        
        GLbyte arg_0 = JSTO<GLbyte> (args[0]);
        GLbyte arg_1 = JSTO<GLbyte> (args[1]);
        GLbyte arg_2 = JSTO<GLbyte> (args[2]);
        
        glNormal3b (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glNormal3b"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glNormal3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glNormal3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glNormal3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glNormal3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glNormal3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glNormal3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glNormal3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glNormal3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glNormal3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glNormal3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glNormal3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glNormal3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 6)
          return ThrowException
            (String::New("Not enough arguments for glOrtho (needs 6)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        GLdouble arg_4 = JSTO<GLdouble> (args[4]);
        GLdouble arg_5 = JSTO<GLdouble> (args[5]);
        
        glOrtho (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glOrtho"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glPassThrough (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glPassThrough (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPassThrough"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPixelStoref (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glPixelStoref (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPixelStoref"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPixelStorei (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glPixelStorei (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPixelStorei"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPixelTransferf (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glPixelTransferf (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPixelTransferf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPixelTransferi (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glPixelTransferi (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPixelTransferi"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPixelZoom (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glPixelZoom (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPixelZoom"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glPointSize (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glPointSize (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPointSize"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPolygonMode (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        glPolygonMode (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPolygonMode"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPolygonOffset (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glPolygonOffset (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPolygonOffset"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glPopAttrib (needs 0)"));
        
        
        glPopAttrib ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPopAttrib"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glPopClientAttrib (needs 0)"));
        
        
        glPopClientAttrib ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPopClientAttrib"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glPopMatrix (needs 0)"));
        
        
        glPopMatrix ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPopMatrix"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glPopName (needs 0)"));
        
        
        glPopName ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPopName"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glPushAttrib (needs 1)"));
        
        GLbitfield arg_0 = JSTO<GLbitfield> (args[0]);
        
        glPushAttrib (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPushAttrib"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glPushClientAttrib (needs 1)"));
        
        GLbitfield arg_0 = JSTO<GLbitfield> (args[0]);
        
        glPushClientAttrib (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPushClientAttrib"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glPushMatrix (needs 0)"));
        
        
        glPushMatrix ();
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPushMatrix"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glPushName (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glPushName (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPushName"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos2d (needs 2)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glRasterPos2d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos2f (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glRasterPos2f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos2i (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glRasterPos2i (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos2i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos2s (needs 2)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        
        glRasterPos2s (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos2s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glRasterPos3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glRasterPos3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glRasterPos3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glRasterPos3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos4d (needs 4)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glRasterPos4d (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos4d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos4f (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glRasterPos4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos4i (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glRasterPos4i (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos4i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRasterPos4s (needs 4)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glRasterPos4s (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRasterPos4s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glReadBuffer (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glReadBuffer (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glReadBuffer"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRectd (needs 4)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glRectd (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRectd"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRectf (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glRectf (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRectf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRecti (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glRecti (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRecti"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRects (needs 4)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glRects (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRects"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glRenderMode (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint ret =
        glRenderMode (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glRenderMode"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glResetHistogram (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glResetHistogram (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glResetHistogram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glResetMinmax (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glResetMinmax (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glResetMinmax"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRotated (needs 4)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glRotated (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRotated"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glRotatef (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glRotatef (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glRotatef"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glScaled (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glScaled (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glScaled"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glScalef (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glScalef (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glScalef"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glScissor (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLsizei arg_2 = JSTO<GLsizei> (args[2]);
        GLsizei arg_3 = JSTO<GLsizei> (args[3]);
        
        glScissor (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glScissor"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glShadeModel (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glShadeModel (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glShadeModel"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glStencilFunc (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLuint arg_2 = JSTO<GLuint> (args[2]);
        
        glStencilFunc (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glStencilFunc"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glStencilMask (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glStencilMask (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glStencilMask"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glStencilOp (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        
        glStencilOp (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glStencilOp"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord1d (needs 1)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        
        glTexCoord1d (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord1d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord1f (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glTexCoord1f (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord1f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord1i (needs 1)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        
        glTexCoord1i (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord1i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord1s (needs 1)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        
        glTexCoord1s (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord1s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord2d (needs 2)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glTexCoord2d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord2f (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glTexCoord2f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord2i (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glTexCoord2i (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord2i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord2s (needs 2)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        
        glTexCoord2s (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord2s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glTexCoord3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glTexCoord3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glTexCoord3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glTexCoord3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord4d (needs 4)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glTexCoord4d (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord4d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord4f (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glTexCoord4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord4i (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glTexCoord4i (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord4i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glTexCoord4s (needs 4)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glTexCoord4s (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexCoord4s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexEnvf (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glTexEnvf (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexEnvf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexEnvi (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glTexEnvi (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexEnvi"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexGend (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glTexGend (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexGend"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexGenf (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glTexGenf (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexGenf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexGeni (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glTexGeni (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexGeni"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexParameterf (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glTexParameterf (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexParameterf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTexParameteri (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glTexParameteri (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTexParameteri"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTranslated (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glTranslated (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTranslated"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glTranslatef (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glTranslatef (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glTranslatef"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertex2d (needs 2)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glVertex2d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertex2f (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glVertex2f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertex2i (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glVertex2i (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex2i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertex2s (needs 2)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        
        glVertex2s (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex2s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertex3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glVertex3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertex3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glVertex3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertex3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glVertex3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertex3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glVertex3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertex4d (needs 4)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glVertex4d (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex4d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertex4f (needs 4)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glVertex4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertex4i (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glVertex4i (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex4i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertex4s (needs 4)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glVertex4s (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertex4s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glViewport (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLsizei arg_2 = JSTO<GLsizei> (args[2]);
        GLsizei arg_3 = JSTO<GLsizei> (args[3]);
        
        glViewport (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glViewport"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glSampleCoverage (needs 2)"));
        
        GLclampf arg_0 = JSTO<GLclampf> (args[0]);
        GLboolean arg_1 = JSTO<GLboolean> (args[1]);
        
        glSampleCoverage (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSampleCoverage"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glActiveTexture (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glActiveTexture (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glActiveTexture"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glClientActiveTexture (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glClientActiveTexture (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glClientActiveTexture"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord1d (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glMultiTexCoord1d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord1d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord1f (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glMultiTexCoord1f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord1f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord1i (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glMultiTexCoord1i (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord1i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord1s (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        
        glMultiTexCoord1s (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord1s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord2d (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glMultiTexCoord2d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord2f (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glMultiTexCoord2f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord2i (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glMultiTexCoord2i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord2i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord2s (needs 3)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glMultiTexCoord2s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord2s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord3d (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glMultiTexCoord3d (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord3f (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glMultiTexCoord3f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord3i (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glMultiTexCoord3i (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord3s (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glMultiTexCoord3s (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord4d (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        GLdouble arg_4 = JSTO<GLdouble> (args[4]);
        
        glMultiTexCoord4d (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord4d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord4f (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        GLfloat arg_4 = JSTO<GLfloat> (args[4]);
        
        glMultiTexCoord4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord4i (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        
        glMultiTexCoord4i (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord4i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glMultiTexCoord4s (needs 5)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        GLshort arg_4 = JSTO<GLshort> (args[4]);
        
        glMultiTexCoord4s (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glMultiTexCoord4s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glFogCoordf (needs 1)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        
        glFogCoordf (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFogCoordf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glFogCoordd (needs 1)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        
        glFogCoordd (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glFogCoordd"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3b (needs 3)"));
        
        GLbyte arg_0 = JSTO<GLbyte> (args[0]);
        GLbyte arg_1 = JSTO<GLbyte> (args[1]);
        GLbyte arg_2 = JSTO<GLbyte> (args[2]);
        
        glSecondaryColor3b (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3b"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glSecondaryColor3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glSecondaryColor3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glSecondaryColor3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glSecondaryColor3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3ub (needs 3)"));
        
        GLubyte arg_0 = JSTO<GLubyte> (args[0]);
        GLubyte arg_1 = JSTO<GLubyte> (args[1]);
        GLubyte arg_2 = JSTO<GLubyte> (args[2]);
        
        glSecondaryColor3ub (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3ub"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3ui (needs 3)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        GLuint arg_2 = JSTO<GLuint> (args[2]);
        
        glSecondaryColor3ui (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3ui"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glSecondaryColor3us (needs 3)"));
        
        GLushort arg_0 = JSTO<GLushort> (args[0]);
        GLushort arg_1 = JSTO<GLushort> (args[1]);
        GLushort arg_2 = JSTO<GLushort> (args[2]);
        
        glSecondaryColor3us (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glSecondaryColor3us"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPointParameterf (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glPointParameterf (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPointParameterf"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glPointParameteri (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glPointParameteri (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glPointParameteri"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glBlendFuncSeparate (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        GLenum arg_3 = JSTO<GLenum> (args[3]);
        
        glBlendFuncSeparate (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBlendFuncSeparate"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos2d (needs 2)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glWindowPos2d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos2f (needs 2)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glWindowPos2f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos2i (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glWindowPos2i (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos2i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos2s (needs 2)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        
        glWindowPos2s (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos2s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos3d (needs 3)"));
        
        GLdouble arg_0 = JSTO<GLdouble> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glWindowPos3d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos3f (needs 3)"));
        
        GLfloat arg_0 = JSTO<GLfloat> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glWindowPos3f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos3i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glWindowPos3i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glWindowPos3s (needs 3)"));
        
        GLshort arg_0 = JSTO<GLshort> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glWindowPos3s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glWindowPos3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsQuery (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLboolean ret =
        glIsQuery (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsQuery"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glBeginQuery (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        
        glBeginQuery (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBeginQuery"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEndQuery (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        glEndQuery (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEndQuery"), tmpl -> GetFunction ());
  }
  
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetQueryiv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetQueryiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetQueryiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetQueryObjectiv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetQueryObjectiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetQueryObjectiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetQueryObjectuiv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLuint ret;
        glGetQueryObjectuiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetQueryObjectuiv"), tmpl -> GetFunction ());
  }

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glBindBuffer (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        
        glBindBuffer (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glBindBuffer"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsBuffer (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLboolean ret =
        glIsBuffer (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsBuffer"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glUnmapBuffer (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLboolean ret =
        glUnmapBuffer (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glUnmapBuffer"), tmpl -> GetFunction ());
  }
  
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetBufferParameteriv (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetBufferParameteriv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetBufferParameteriv"), tmpl -> GetFunction ());
  }

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib1d (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        
        glVertexAttrib1d (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib1d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib1f (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glVertexAttrib1f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib1f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib1s (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        
        glVertexAttrib1s (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib1s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib2d (needs 3)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        
        glVertexAttrib2d (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib2d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib2f (needs 3)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glVertexAttrib2f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib2s (needs 3)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        
        glVertexAttrib2s (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib2s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib3d (needs 4)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        
        glVertexAttrib3d (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib3d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib3f (needs 4)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glVertexAttrib3f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib3s (needs 4)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        
        glVertexAttrib3s (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib3s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib4Nub (needs 5)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLubyte arg_1 = JSTO<GLubyte> (args[1]);
        GLubyte arg_2 = JSTO<GLubyte> (args[2]);
        GLubyte arg_3 = JSTO<GLubyte> (args[3]);
        GLubyte arg_4 = JSTO<GLubyte> (args[4]);
        
        glVertexAttrib4Nub (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib4Nub"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib4d (needs 5)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLdouble arg_1 = JSTO<GLdouble> (args[1]);
        GLdouble arg_2 = JSTO<GLdouble> (args[2]);
        GLdouble arg_3 = JSTO<GLdouble> (args[3]);
        GLdouble arg_4 = JSTO<GLdouble> (args[4]);
        
        glVertexAttrib4d (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib4d"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib4f (needs 5)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        GLfloat arg_4 = JSTO<GLfloat> (args[4]);
        
        glVertexAttrib4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glVertexAttrib4s (needs 5)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLshort arg_1 = JSTO<GLshort> (args[1]);
        GLshort arg_2 = JSTO<GLshort> (args[2]);
        GLshort arg_3 = JSTO<GLshort> (args[3]);
        GLshort arg_4 = JSTO<GLshort> (args[4]);
        
        glVertexAttrib4s (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glVertexAttrib4s"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glEnableVertexAttribArray (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glEnableVertexAttribArray (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glEnableVertexAttribArray"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDisableVertexAttribArray (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glDisableVertexAttribArray (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDisableVertexAttribArray"), tmpl -> GetFunction ());
  }
  
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetVertexAttribdv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLdouble ret;
        glGetVertexAttribdv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetVertexAttribdv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetVertexAttribfv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLfloat ret;
        glGetVertexAttribfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetVertexAttribfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetVertexAttribiv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetVertexAttribiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetVertexAttribiv"), tmpl -> GetFunction ());
  }

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDeleteShader (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glDeleteShader (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDeleteShader"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glDetachShader (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        
        glDetachShader (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDetachShader"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glCreateShader (needs 1)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLuint ret =
        glCreateShader (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glCreateShader"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glCompileShader (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glCompileShader (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glCompileShader"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 0)
          return ThrowException
            (String::New("Not enough arguments for glCreateProgram (needs 0)"));
        
        GLuint ret =
        glCreateProgram ();
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glCreateProgram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glAttachShader (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        
        glAttachShader (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glAttachShader"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glLinkProgram (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glLinkProgram (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glLinkProgram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glUseProgram (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glUseProgram (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUseProgram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glDeleteProgram (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glDeleteProgram (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glDeleteProgram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glValidateProgram (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        glValidateProgram (
            arg_0);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glValidateProgram"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glUniform1f (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        
        glUniform1f (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform1f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glUniform2f (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        
        glUniform2f (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform2f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glUniform3f (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        
        glUniform3f (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform3f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glUniform4f (needs 5)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLfloat arg_1 = JSTO<GLfloat> (args[1]);
        GLfloat arg_2 = JSTO<GLfloat> (args[2]);
        GLfloat arg_3 = JSTO<GLfloat> (args[3]);
        GLfloat arg_4 = JSTO<GLfloat> (args[4]);
        
        glUniform4f (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform4f"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glUniform1i (needs 2)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        glUniform1i (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform1i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 3)
          return ThrowException
            (String::New("Not enough arguments for glUniform2i (needs 3)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        
        glUniform2i (
            arg_0
          , arg_1
          , arg_2);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform2i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glUniform3i (needs 4)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        
        glUniform3i (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform3i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 5)
          return ThrowException
            (String::New("Not enough arguments for glUniform4i (needs 5)"));
        
        GLint arg_0 = JSTO<GLint> (args[0]);
        GLint arg_1 = JSTO<GLint> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLint arg_3 = JSTO<GLint> (args[3]);
        GLint arg_4 = JSTO<GLint> (args[4]);
        
        glUniform4i (
            arg_0
          , arg_1
          , arg_2
          , arg_3
          , arg_4);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glUniform4i"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsShader (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLboolean ret =
        glIsShader (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsShader"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glIsProgram (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        GLboolean ret =
        glIsProgram (
            arg_0);
        return TOJS(ret);
      });
    gl -> Set (String::NewSymbol ("glIsProgram"), tmpl -> GetFunction ());
  }
  
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetShaderiv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetShaderiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetShaderiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetProgramiv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        
        GLint ret;
        glGetProgramiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetProgramiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetUniformLocation (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLchar ret;
        glGetUniformLocation (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetUniformLocation"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetUniformfv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        GLfloat ret;
        glGetUniformfv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetUniformfv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glGetUniformiv (needs 2)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLint arg_1 = JSTO<GLint> (args[1]);
        
        GLint ret;
        glGetUniformiv (arg_0, arg_1, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetUniformiv"), tmpl -> GetFunction ());
  }
  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {       
        if (args . Length () < 1)
          return ThrowException
            (String::New("Not enough arguments for glGetAttribLocation (needs 1)"));
        
        GLuint arg_0 = JSTO<GLuint> (args[0]);
        
        GLchar ret;
        glGetAttribLocation (arg_0, &ret);
        return TOJS (ret);
      });
    gl -> Set (String::NewSymbol ("glGetAttribLocation"), tmpl -> GetFunction ());
  }

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glStencilFuncSeparate (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLint arg_2 = JSTO<GLint> (args[2]);
        GLuint arg_3 = JSTO<GLuint> (args[3]);
        
        glStencilFuncSeparate (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glStencilFuncSeparate"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 4)
          return ThrowException
            (String::New("Not enough arguments for glStencilOpSeparate (needs 4)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLenum arg_1 = JSTO<GLenum> (args[1]);
        GLenum arg_2 = JSTO<GLenum> (args[2]);
        GLenum arg_3 = JSTO<GLenum> (args[3]);
        
        glStencilOpSeparate (
            arg_0
          , arg_1
          , arg_2
          , arg_3);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glStencilOpSeparate"), tmpl -> GetFunction ());
  }
  

  { Local<FunctionTemplate> tmpl =
      FunctionTemplate::New
      (JS_FUNC {
        if (args . Length () < 2)
          return ThrowException
            (String::New("Not enough arguments for glStencilMaskSeparate (needs 2)"));
        
        GLenum arg_0 = JSTO<GLenum> (args[0]);
        GLuint arg_1 = JSTO<GLuint> (args[1]);
        
        glStencilMaskSeparate (
            arg_0
          , arg_1);
        return Undefined();
      });
    gl -> Set (String::NewSymbol ("glStencilMaskSeparate"), tmpl -> GetFunction ());
  }
  
// -*- mode: c++ -*-

}
